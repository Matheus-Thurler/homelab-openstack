pipeline {
  agent any
  environment {
    AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
    AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    JENKINS_PUB_KEY = credentials('jenkins-pub-key')
  }
  parameters {
    choice(
      name: 'CREATE_OR_DESTROY',
      choices: ['Create', 'Destroy'],
      description: 'Would you like to create or destroy the Kubernetes cluster?'
    )
  }
  stages {
    stage('authentication') {
      agent {
        docker {
          image 'alpine'
        }
      }
      steps {
        dir('./') {
          withCredentials([sshUserPrivateKey(credentialsId: 'jenkins-priv-key', keyFileVariable: 'JENKINS_PRIV_KEY')]) {
            sh '''
              cp "$JENKINS_PRIV_KEY" id_rsa
              echo "$JENKINS_PUB_KEY" > id_rsa.pub
              echo "ok"
            '''
          }
        }
      }
    }
    stage('Preparation') {
      steps {
        echo 'Cleaning up workspace...'
        deleteDir() // <-- Esta Ã© a linha mais importante para resolver o seu problema.
      }
    }
    stage('init') {
      agent {
        docker {
          image 'hashicorp/terraform:1.9.8'
          args '--entrypoint=""'
          
        }
      }
      steps {
        dir('./') {
          sh '''
          terraform init -reconfigure -no-color
            terraform init -no-color
          '''
        }
      }
    }
    stage('plan') {
      agent {
        docker {
          image 'hashicorp/terraform:1.9.8'
          args '--entrypoint=""'
        }
      }
      steps {
        dir('./') {
          sh '''
            terraform plan -no-color
          '''
        }
      }
      when {
        expression {
          params.CREATE_OR_DESTROY == "Create"
        }
      }
    }
    stage('apply') {
      agent {
        docker {
          image 'hashicorp/terraform:1.9.8'
          args '--entrypoint=""'
          args '-u root'
        }
      }
      steps {
        dir('./') {
          sh '''
            terraform apply -no-color -auto-approve
          '''
        }
      }
      when {
        expression {
          params.CREATE_OR_DESTROY == "Create"
        }
      }
    }
    stage('Fazer Upload para o MinIO') {
      agent {
        docker {
          image 'minio/mc:RELEASE.2025-08-13T08-35-41Z'
          args '--entrypoint="" -u root'
        }
      }
      environment {
        MINIO_ENDPOINT = 'http://192.168.68.110:9000'
        MINIO_ACCESS_KEY = credentials('aws-access-key-id')
        MINIO_SECRET_KEY = credentials('aws-secret-access-key')
    }
      steps {
        dir('./') {
          sh  '''
            ls -lah
            ls -la ./modules/openvpn/app/
            if [ -f "client.ovpn"]; then
              mc alias set deploy $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY --api S3v4
              mc cp client.ovpn deploy/arquivos-openstack/
              echo "Arquivo deployado"
            else
              echo "Arquivo fez deploy no primeiro apply"
            fi
          '''
        }
      }
      when {
        expression {
          params.CREATE_OR_DESTROY == "Create"
        }
      }
    }
    // stage('kubespray') {
    //   agent {
    //     docker {
    //       image 'quay.io/kubespray/kubespray:v2.26.0'
    //       args '--entrypoint="" -u root'
    //     }
    //   }
      // steps {
      //   dir('kubernetes/02_kubernetes_production_ready/terraform') {
      //     sh '''
      //       export ANSIBLE_ROLES_PATH="$ANSIBLE_ROLES_PATH:/kubespray/roles"
      //       export ANSIBLE_HOST_KEY_CHECKING="False"

      //       ansible-playbook \
      //         --become \
      //         --inventory inventory.ini \
      //         --extra-vars "kube_network_plugin=flannel" \
      //         --private-key id_rsa \
      //         /kubespray/cluster.yml
      //     '''
      //   }
      // }
      // when {
      //   expression {
      //     params.CREATE_OR_DESTROY == "Create"
      //   }
      // }
    // }
    stage('destroy') {
      agent {
        docker {
          image 'hashicorp/terraform:1.9.8'
          args '--entrypoint=""'
        }
      }
      steps {
        dir('./') {
          sh '''
            terraform apply -destroy -no-color -auto-approve
          '''
        }
      }
      when {
        expression {
          params.CREATE_OR_DESTROY == "Destroy"
        }
      }
    }
  }
}